(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{414:function(t,s,e){"use strict";e.r(s);var a=e(3),o=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("Boxx"),t._v(" "),e("h2",{attrs:{id:"spring基础"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring基础"}},[t._v("#")]),t._v(" Spring基础")]),t._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("1. Spring两大核心？")]),e("p",[t._v("IOC控制反转， AOP面向切面编程")])]),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("2. IOC控制反转到底反转了什么？")]),e("p",[t._v("​\t"),e("strong",[t._v("创建对象的过程，形成对象与对象之间依赖关系的操作")]),e("br"),t._v("\n​\t(Martin: 依赖对象的获得被反转了，本来应该是我们自己new， 现在是通过SpringIOC容器注入)")])]),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("3. 什么是AOP？")]),e("p",[t._v("​\tAOP即"),e("strong",[t._v("面向切面编程")]),t._v("，关注的是"),e("code",[t._v("非核心业务的处理")]),e("br"),t._v("\n​\t"),e("strong",[t._v("用到的地方")]),t._v("：比如日志、网站的访问次数等"),e("br"),t._v("\n​\t"),e("strong",[t._v("主要目的")]),t._v(":：核心业务和非核心业务之间的解耦"),e("br"),t._v("\n​\t底层使用了"),e("strong",[t._v("动态代理")]),t._v("模式"),e("br"),t._v("\n​\t"),e("strong",[t._v("要素")]),t._v("：advice(非核心业务的载体)， pointcut(非核心业务的放置位置)，\n​\t\tadvisor(建立advice和pointcut之间的联系)")])]),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("4. 反转之后的好处？")]),e("p",[t._v("​\t有助于类与类之间的"),e("strong",[t._v("解耦")])])]),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("5. IOC的好处？")]),e("p",[t._v("​\t将对象的创建和属性的赋值完全转交给Spring，\n​\t从而降低类与类之间的依赖关系，达到松散耦合的目的")])]),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("6. ICO的核心？")]),e("p",[t._v("​\tIOC容器之所以叫IOC容器， 是因为其中的IOC指的是"),e("code",[t._v("将主动new变成了被动注入")]),e("br"),t._v("\n​\t从此角度出发， IOC的核心是"),e("code",[t._v("DI依赖注入")])])]),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("7. DI是什么？")]),e("p",[t._v("​\t依赖注入，指的是建立每个对象之间关系的方式，也就是对属性赋值的操作")])]),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("8. Bean的属性都有？")]),e("p",[t._v("​\t"),e("em",[e("strong",[t._v("id")])]),t._v("：(每个IOC容器对象的唯一标识)，"),e("br"),t._v("\n​\t"),e("em",[e("strong",[t._v("class")])]),t._v("：(当前类对应的类型)，"),e("br"),t._v("\n​\t"),e("em",[e("strong",[t._v("scope")])]),t._v("：(作用范围)，"),e("br"),t._v("\n​\t"),e("em",[e("strong",[t._v("lazy-init")])]),t._v("：(是否 延迟加载)，"),e("br"),t._v("\n​\t"),e("em",[e("strong",[t._v("factory-method")])]),t._v("：(指定返回返回该对象的方法名称)，"),e("br"),t._v("\n​\t"),e("em",[e("strong",[t._v("factory-bean")])]),t._v("：(指定工厂实例)，"),e("br"),t._v("\n​\t"),e("em",[e("strong",[t._v("init-method")])]),t._v("：(对象初始化调用的方法)，"),e("br"),t._v("\n​\t"),e("em",[e("strong",[t._v("destroy-method")])])])]),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("9. scope分别有几种情况？如何配置？")]),e("ul",[e("li",[e("p",[t._v("singleton，prototype，request，session，globalSession")])]),t._v(" "),e("li",[e("p",[t._v("一般"),e("code",[t._v("无状态的类的对象都配置成singleton")]),t._v("，无状态的类一般指像Service和Dao层这样逻辑处理类"),e("br"),e("code",[t._v("有状态的类需要设置成prototype或request")]),t._v("，一般指像Action一样存在多实例， 并且其中数据都不同")])])])]),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("10. Spring创建对象的方式？")]),e("ol",[e("li",[t._v("构造方法创建(id+class)；")]),t._v(" "),e("li",[t._v("静态工厂创建(class+factory-method)；")]),t._v(" "),e("li",[t._v("实例工厂创建(factory-bean+factory-method)")])])]),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("11. 完成注入的方式？")]),e("ol",[e("li",[t._v("setter注入 <property ...>")]),t._v(" "),e("li",[t._v("构造方法注入 <constructor-arg ...>")])])]),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("12. Schema是什么？优势？")]),e("ul",[e("li",[e("p",[t._v("用来校验xml文件规范的xsd的文件")]),t._v(" "),e("ol",[e("li",[t._v("基于xml语法")]),t._v(" "),e("li",[t._v("扩充了数据类型")]),t._v(" "),e("li",[t._v("支持命名空间")])]),t._v(" "),e("ul",[e("li",[t._v("schema最重要的能力之一就是对数据类型的支持")])])])])]),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("13. 复杂属性如何注入？")]),e("ul",[e("li",[t._v("数组/List/Set "),e("br"),t._v("<property><array/list/set><value>value</value>")]),t._v(" "),e("li",[t._v("Map "),e("br"),t._v(' <map><entry key="" value=""/>')]),t._v(" "),e("li",[t._v("Properties "),e("br"),t._v(' <props><prop key="">vlaue</prop>')])])]),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("14. 常用Spring注解？")]),e("p",[t._v("@Component， @Repository， @Service， @Controller\n@Autowired， @Qualifier， @Scope，@Value\n@Aspect， @Pointcut， @Before， @After， @AfterReturning， @Around， @AfterThrowing")])]),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("15. 接受文件:")]),e("p",[t._v('​\t@RequestParam(value="file") MultipartFile file')])]),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("16. 关于日期、时间")]),e("ul",[e("li",[t._v("映射类声明变量前，加入此注解:\n"),e("ol",[e("li",[e("strong",[t._v("@DatetimeFormat")]),t._v("是将String转换成Date，一般前台给后台传值时用(springmvc用)")]),t._v(" "),e("li",[t._v("将Date转换成String  一般后台传值给前台时设置响应方式为\n"),e("strong",[t._v('@JsonFormat(pattern="yyyy-MM-dd")')])]),t._v(" "),e("li",[e("strong",[t._v('@JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss"，timezone = "GMT+8")')]),e("br"),t._v("只争对json响应式的处理(中国为东8区)")]),t._v(" "),e("li",[e("strong",[t._v("@JsonIgnore")]),t._v(" json响应式忽略这个属性\nprivate Date hiredate;")])])])])]),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("17. 使用注解完成IOC的流程？")]),e("ol",[e("li",[t._v("添加context命名空间以及schemaLocation")]),t._v(" "),e("li",[t._v('配置文件中添加上下文组件扫描<context:component-scan base-package="com"/>')]),t._v(" "),e("li",[t._v("给所有需要放入IOC容器中的组件添加注解@Component/@S../@C../@R../@Scope")]),t._v(" "),e("li",[t._v("给所有需要注入的属性添加注解@Autowired或@Resource")])])]),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("18. @Resource和@Autowired的区别？")]),e("ol",[e("li",[e("strong",[t._v("来源不同")]),e("br"),t._v(" "),e("strong",[t._v("@Autowired")]),t._v("来自Spring类库中，"),e("strong",[t._v("@Resource")]),t._v("是J2EE官方类库中的")]),t._v(" "),e("li",[e("strong",[t._v("底层匹配机制不同")]),e("br"),t._v(" "),e("strong",[t._v("@Autowired")]),t._v("优先按照类型进行匹配，如果存在一个接口多个实现类， 再去按照属性名匹配，\n如果匹配不到，抛出异常NoUniqueBeanDefinitionException，\n此时，可通过 "),e("strong",[t._v('Qualifier("对象名")')]),t._v(" 指定注入对象"),e("br"),t._v(" "),e("strong",[t._v("@Resource")]),t._v("优先按照属性名进行匹配，如果匹配不到，再去按照类型进行匹配，\n如果匹配到多个类型，抛出异常NoUniqueBeanDefinitionException\n此时，可通过 "),e("strong",[t._v('@Resource(name="对象名")')]),t._v(" 指定注入对象")])])]),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("19. 反射涉及到哪些类？分别对应哪些方法？")]),e("ul",[e("li",[e("em",[e("strong",[t._v("Class")])]),t._v("：太多， 比如getDeclaredConstructors()， c.newInstance()")]),t._v(" "),e("li",[e("em",[e("strong",[t._v("Field")])]),t._v("： get(obj)，set(obj,value)")]),t._v(" "),e("li",[e("em",[e("strong",[t._v("Method")])]),t._v("： invoke(obj, a.class, b.class, ...)")]),t._v(" "),e("li",[e("em",[e("strong",[t._v("Constructor")])]),t._v("： newInstance(a.class, b.class ...)，setAccessible(true)")])])]),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("20. 常用设计模式？")]),e("p",[t._v("​\t单例模式， 工厂模式， 观察者模式(监听器)， 装饰者模式(包装流)， 代理模式(AOP)")])]),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("21. spring有几种通知(增强)？")]),e("ol",[e("li",[t._v("前置通知  before")]),t._v(" "),e("li",[t._v("后置通知  after\nafterReturnning")]),t._v(" "),e("li",[t._v("环绕通知  aroud")]),t._v(" "),e("li",[t._v("异常通知  throws")])])]),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("22. 都有哪几种动态代理？")]),e("ul",[e("li",[t._v("jdk     依赖接口")]),t._v(" "),e("li",[t._v("cglib\t继承关系")])])])],1)}),[],!1,null,null,null);s.default=o.exports}}]);